from typing import TypeVar

from lenses import Lens

from amino.do import tdo
from amino import IO, List, Path, Left
from amino.json import decode_json, dump_json

from ribosome.nvim import NvimIO
from ribosome.nvim.io import NvimIOState
from ribosome.config import AutoData

A = TypeVar('A')
D = TypeVar('D', bound=AutoData)


@tdo(NvimIOState[D, Path])
def state_file(name: str) -> Generator:
    settings = yield NvimIOState.inspect(a -> a.settings)
    dir = yield NvimIOState.lift(settings.project_state_dir.value_or_default)
    yield NvimIOState.lift(NvimIO.from_io(IO.delay(dir.mkdir, parents=True, exist_ok=True)))
    yield NvimIOState.pure(dir / f'{name}.json')


@tdo(NvimIOState[D, None])
def load_json_data(name: str) -> Generator:
    file = yield state_file(name)
    exists = yield NvimIOState.lift(NvimIO.from_io(IO.delay(file.exists)))
    if exists:
        json = yield NvimIOState.lift(NvimIO.from_io(IO.delay(file.read_text)))
        yield NvimIOState.pure(decode_json(json))
    else:
        yield NvimIOState.pure(Left(f'state file {file} does not exist'))


def load_json_state(name: str, l: Lens) -> NvimIOState[D, None]:
    return load_json_data(name).cata(a -> NvimIOState.pure(None), d -> NvimIOState.modify(a -> l.bind(a).set(d)))


@tdo(NvimIOState[D, None])
def store_json_data(name: str, \data: A) -> Generator:
    file = yield state_file(name)
    json = yield NvimIOState.lift(NvimIO.from_either(dump_json(\data)))
    yield NvimIOState.lift(NvimIO.from_io(IO.delay(file.write_text, json)))
    yield NvimIOState.pure(None)


@tdo(NvimIOState[D, None])
def store_json_state(name: str, \data: D -> A) -> Generator:
    payload = yield NvimIOState.inspect(\data)
    yield store_json_data(name, payload)

__all__ = ('load_json_state', 'store_json_data', 'store_json_state')
