from typing import TypeVar

from amino import Just, Nothing, Right, Left, L, _, __
from amino.state import EvalState, EvalState
from amino.do import tdo

from ribosome.machine.transition import TransitionResult, TransitionLog, TransitionResult
from ribosome.machine.process_messages import PrioQueue
from ribosome.logging import ribo_log
from ribosome.machine.base import TransState
from ribosome.request.dispatch import PluginState, ComponentState
from ribosome.machine.message_base import Message

A = TypeVar('A')
D = TypeVar('D')


def process_message(messages: PrioQueue[A], state: D, send: (D, A) -> TransState) -> (PrioQueue[A], TransState) =
    def process1(Right(((prio, msg), rest))) = rest, send(state, msg)
    @addpattern(process1)
    def process1(Left(err)) = messages, EvalState.pure(TransitionResult.empty(state))
    process1(messages.get)
