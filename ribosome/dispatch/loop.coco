from typing import TypeVar

from amino import Right, Left, Nil

from ribosome.nvim.io import NS
from ribosome.dispatch.data import DispatchResult, DispatchUnit
from ribosome.trans.queue import PrioQueue

A = TypeVar('A')
D = TypeVar('D')


def process_message(messages: PrioQueue[A], send: A -> NS[D, DispatchResult]
        ) -> (PrioQueue[A], NS[D, DispatchResult]) =
    def process1(Right(((prio, msg), rest))) = rest, send(msg)
    @addpattern(process1)
    def process1(Left(err)) = messages, NS.pure(DispatchResult(DispatchUnit(), Nil))
    process1(messages.get)
