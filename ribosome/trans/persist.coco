from typing import TypeVar

from lenses import UnboundLens

from amino import IO, List, Path, Left, do, Do
from amino.json import decode_json, dump_json

from ribosome.nvim.io import NvimIO
from ribosome.nvim.io import NS
from ribosome.config.config import Resources
from ribosome.config.settings import Settings

A = TypeVar('A')
D = TypeVar('D')
S = TypeVar('S', bound=Settings)
CC = TypeVar('CC')


settings: NS[Resources[S, D, CC], S] = NS.inspect(a -> a.settings)


def mkdir(dir: Path) -> IO[None]:
    return IO.delay(dir.mkdir, parents=True, exist_ok=True)


@do(NvimIO[Path])
def state_file(settings: S, name: str) -> Do:
    dir = yield settings.project_state_dir.value_or_default
    yield NvimIO.from_io(mkdir(dir))
    yield NvimIO.pure(dir / f'{name}.json')


@do(NvimIO[A])
def load_json_data_from(name: str, file: Path) -> Do:
    exists = yield NvimIO.from_io(IO.delay(file.exists))
    if exists:
        json = yield NvimIO.from_io(IO.delay(file.read_text))
        yield NvimIO.pure(decode_json(json))
    else:
        yield NvimIO.pure(Left(f'state file {file} does not exist'))


@do(NvimIO[A])
def load_json_data(settings: S, name: str) -> Do:
    file = yield state_file(settings, name)
    yield load_json_data_from(file)


@do(NS[Resources[S, D, CC], None])
def load_json_state(name: str, store: UnboundLens) -> Do:
    s = yield settings
    state = yield NS.lift(load_json_data(s, name))
    yield state.cata(a -> NS.pure(None), d -> NS.modify(store.set(d)))


@do(NvimIO[None])
def store_json_data(settings: S, name: str, \data: A) -> Do:
    file = yield state_file(settings, name)
    json = yield NvimIO.from_either(dump_json(\data))
    yield NvimIO.from_io(IO.delay(file.write_text, json))
    yield NvimIO.pure(None)


@do(NS[Resources[S, D, CC], None])
def store_json_state(name: str, fetch: D -> A) -> Do:
    payload = yield NS.inspect(s -> fetch(s.data))
    s = yield settings
    yield NS.lift(store_json_data(s, name, payload))

__all__ = ('load_json_state', 'store_json_data', 'store_json_state')
